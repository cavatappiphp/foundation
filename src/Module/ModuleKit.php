<?php

namespace Cavatappi\Foundation\Module;

use Cavatappi\Foundation\Exceptions\CodePathNotSupported;
use Cavatappi\Foundation\Service;
use ReflectionClass;
use ReflectionNamedType;

trait ModuleKit {
	/**
	 * Map of classes and the interfaces they implement.
	 *
	 * @var array<class-string, class-string[]>
	 */
	private static array $classInterfaceMap;

	/**
	 * Map of classes and the interfaces they implement.
	 *
	 * @var array<class-string, array<string, class-string|callable>|string|callable>
	 */
	private static array $serviceDependencyMap;

	/**
	 * Array of class name keys with the interfaces they implement.
	 *
	 * @return array<class-string, class-string[]>
	 */
	public static function discoverableClasses(): array {
		self::$classInterfaceMap ??= ModuleUtils::analyzeClasses(self::listClasses());
		return self::$classInterfaceMap;
	}

	/**
	 * Get the Services to be registered in this Model and their dependencies.
	 *
	 * @return array<class-string, array<string, class-string|callable>|string|callable>
	 */
	public static function serviceDependencyMap(): array {
		self::$serviceDependencyMap ??= self::mapServices(self::serviceMapOverrides());
		return self::$serviceDependencyMap;
	}

	/**
	 * Get the list of discoverable classes in this Module.
	 *
	 * @return class-string[]
	 */
	abstract private static function listClasses(): array;

	/**
	 * Get any overrides to the autogenerated service dependency map.
	 *
	 * @return array<class-string, array<string, class-string|callable>|string|callable>
	 */
	abstract private static function serviceMapOverrides(): array;

	/**
	 * Get the Services defined in this DomainModel and their dependencies.
	 *
	 * @param  <class-string, array<string, class-string|callable>|string|callable> $overrides
	 *   Classes to exclude from the automapping and any additions to the dependency map.
	 * @return array<class-string, array<string, class-string|callable>|string|callable>
	 */
	private static function mapServices(array $overrides = []): array {
		$overridden = \array_keys($overrides);
		$automapClasses = \array_keys(
			\array_filter(
				self::discoverableClasses(),
				fn($implements, $class) => !\in_array($class, $overridden) && \in_array(Service::class, $implements),
				ARRAY_FILTER_USE_BOTH
			)
		);

		$automapResults = [];
		foreach ($automapClasses as $classToMap) {
			$automapResults[$classToMap] = ModuleUtils::reflectService($classToMap);
		}

		return \array_merge($automapResults, $overrides);
	}
}
